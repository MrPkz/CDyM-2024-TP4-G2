
TP4Microchip.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fc  00800100  000003ce  00000462  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  008001fc  008001fc  0000055e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000055e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000590  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001042  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009be  00000000  00000000  0000176a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000096a  00000000  00000000  00002128  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c4  00000000  00000000  00002a94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d5  00000000  00000000  00002d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003f9  00000000  00000000  0000332d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00003726  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 bc 00 	jmp	0x178	; 0x178 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ec       	ldi	r30, 0xCE	; 206
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 3f       	cpi	r26, 0xFC	; 252
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ac ef       	ldi	r26, 0xFC	; 252
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4b 01 	call	0x296	; 0x296 <main>
  9e:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ConfigurarADC>:
#include "adc.h"

static uint8_t valoractual;		//Variable donde se rescatará el valor del ADC

void ConfigurarADC(void){	// Configuración del ADC
	DDRC &= ~(1 << PORTC3);																
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	87 7f       	andi	r24, 0xF7	; 247
  aa:	87 b9       	out	0x07, r24	; 7
	//Configuro el pin PC3 (ADC3) como entrada
	DIDR0 |= (1 << ADC3D); 
  ac:	ee e7       	ldi	r30, 0x7E	; 126
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	88 60       	ori	r24, 0x08	; 8
  b4:	80 83       	st	Z, r24
	//Deshabilita la entrada digital del puerto ADC3 haciendo que únicamente funcione en modo analógico.
	ADMUX |= (1 << MUX0) | (1 << MUX1) | (1 << REFS0) | (1 << ADLAR);					  
  b6:	ec e7       	ldi	r30, 0x7C	; 124
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	83 66       	ori	r24, 0x63	; 99
  be:	80 83       	st	Z, r24
	// Selecciona el canal 3 del ADC (MUX1,MUX0) para que trabaje con el voltaje de referencia a VCC (REFS0) y para que la salida se justifique a la izquierda (ADLAR).
	//De este modo, la salida se encontrará justificada en ADCH
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN); 
  c0:	ea e7       	ldi	r30, 0x7A	; 122
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	87 68       	ori	r24, 0x87	; 135
  c8:	80 83       	st	Z, r24
	// Configuro el preescalador del ADC para que trabaje a 125kHz (ADPS), y habilitando el ADC (ADEN).
	ADCSRA |= (1<<ADSC);
  ca:	80 81       	ld	r24, Z
  cc:	80 64       	ori	r24, 0x40	; 64
  ce:	80 83       	st	Z, r24
  d0:	08 95       	ret

000000d2 <ObtenerValor>:
	//Manda la instrucción para convertir el primer valor medido por el ADC.
}

uint8_t ObtenerValor(void){
	while(!(ADCSRA&(1<<ADIF))){}		//Espera a que el flag ADIF sea 1, indicando que la conversión del valor a medir está completa.
  d2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  d6:	84 ff       	sbrs	r24, 4
  d8:	fc cf       	rjmp	.-8      	; 0xd2 <ObtenerValor>
	valoractual=ADCH;					//Guarda el valor del ADC; el flag de fin de conversión se borra al leer el registro
  da:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  de:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <__data_end>
	ADCSRA |= (1<<ADSC);				//Empieza una nueva conversión
  e2:	ea e7       	ldi	r30, 0x7A	; 122
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	80 83       	st	Z, r24
	return valoractual;					//Devuelve el valor actual
  ec:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <__data_end>
  f0:	08 95       	ret

000000f2 <IniciarTimers>:
#include "leds.h"

static uint8_t rojo;

void IniciarTimers(void){
	DDRB |= (1<<PORTB1) | (1<<PORTB2) | (1<<PORTB5);									//Configuro pins de LEDs como salida
  f2:	84 b1       	in	r24, 0x04	; 4
  f4:	86 62       	ori	r24, 0x26	; 38
  f6:	84 b9       	out	0x04, r24	; 4
	TCCR1B |= (1<<CS12);																//Setea Prescaler en 256
  f8:	e1 e8       	ldi	r30, 0x81	; 129
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	84 60       	ori	r24, 0x04	; 4
 100:	80 83       	st	Z, r24
	TCCR1A |= (1<<WGM10) | (1<<COM1B1) | (1<<COM1A1) | (1<<COM1B0) | (1<<COM1A0);		//Setea el Modo invertido (COM1A/B) en modo Fase Correcta de 8 bits (WGM)
 102:	e0 e8       	ldi	r30, 0x80	; 128
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	81 6f       	ori	r24, 0xF1	; 241
 10a:	80 83       	st	Z, r24
	//Inicialmente, la luz será blanca
	azul = 255;																			//Indica Valor Azul
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 114:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	verde = 255;																		//Indica Valor Verde
 118:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 11c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	rojo = 255;																			//Indica Valor Rojo
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <rojo>
 126:	08 95       	ret

00000128 <CambiarColor>:
}

void CambiarColor(uint8_t col, uint8_t pos){
	//Asigna el valor actual para el color almacenado en 'pos' según corresponda en 'col'
	switch(col){
 128:	87 34       	cpi	r24, 0x47	; 71
 12a:	41 f0       	breq	.+16     	; 0x13c <CambiarColor+0x14>
 12c:	82 35       	cpi	r24, 0x52	; 82
 12e:	19 f0       	breq	.+6      	; 0x136 <CambiarColor+0xe>
 130:	82 34       	cpi	r24, 0x42	; 66
 132:	79 f4       	brne	.+30     	; 0x152 <CambiarColor+0x2a>
 134:	09 c0       	rjmp	.+18     	; 0x148 <CambiarColor+0x20>
		case 'R':
		rojo = pos;
 136:	60 93 fd 01 	sts	0x01FD, r22	; 0x8001fd <rojo>
		break;
 13a:	08 95       	ret
		case 'G':
		verde = pos;
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 142:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		break;
 146:	08 95       	ret
		case 'B':
		azul = pos;
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 14e:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 152:	08 95       	ret

00000154 <UpdateRojo>:
	}
}

void UpdateRojo(void){
	//Actualiza el estado del color rojo por Software
	if(rojo < TCNT1 ){
 154:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <rojo>
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 15e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 162:	82 17       	cp	r24, r18
 164:	93 07       	cpc	r25, r19
 166:	20 f4       	brcc	.+8      	; 0x170 <UpdateRojo+0x1c>
		PORTB |= (1<<PORTB5);
 168:	85 b1       	in	r24, 0x05	; 5
 16a:	80 62       	ori	r24, 0x20	; 32
 16c:	85 b9       	out	0x05, r24	; 5
 16e:	08 95       	ret
		}else{
		PORTB &= ~(1<<PORTB5);
 170:	85 b1       	in	r24, 0x05	; 5
 172:	8f 7d       	andi	r24, 0xDF	; 223
 174:	85 b9       	out	0x05, r24	; 5
 176:	08 95       	ret

00000178 <__vector_18>:

static uint8_t pos;
volatile uint8_t col=0, aux;		// Variables que se modificarÃ¡n cuando se atienda las interrupciones
//En aux guarda el caracter leÃ­do, en pos el caracter en mayÃºscula de ser vÃ¡lido

ISR(USART_RX_vect){
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	2f 93       	push	r18
 184:	3f 93       	push	r19
 186:	4f 93       	push	r20
 188:	5f 93       	push	r21
 18a:	6f 93       	push	r22
 18c:	7f 93       	push	r23
 18e:	8f 93       	push	r24
 190:	9f 93       	push	r25
 192:	af 93       	push	r26
 194:	bf 93       	push	r27
 196:	ef 93       	push	r30
 198:	ff 93       	push	r31
	aux = LeerCaracter();
 19a:	0e 94 c3 01 	call	0x386	; 0x386 <LeerCaracter>
 19e:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <aux>
	//Se procesa el caracter de forma case-sensitive
	if (aux == 'R' || aux == 'G' || aux == 'B' || aux == 'S'){
 1a2:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <aux>
 1a6:	82 35       	cpi	r24, 0x52	; 82
 1a8:	61 f0       	breq	.+24     	; 0x1c2 <__vector_18+0x4a>
 1aa:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <aux>
 1ae:	87 34       	cpi	r24, 0x47	; 71
 1b0:	41 f0       	breq	.+16     	; 0x1c2 <__vector_18+0x4a>
 1b2:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <aux>
 1b6:	82 34       	cpi	r24, 0x42	; 66
 1b8:	21 f0       	breq	.+8      	; 0x1c2 <__vector_18+0x4a>
 1ba:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <aux>
 1be:	83 35       	cpi	r24, 0x53	; 83
 1c0:	19 f5       	brne	.+70     	; 0x208 <__vector_18+0x90>
		col = aux;
 1c2:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <aux>
 1c6:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <col>
		switch(aux){
 1ca:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <aux>
 1ce:	87 34       	cpi	r24, 0x47	; 71
 1d0:	71 f0       	breq	.+28     	; 0x1ee <__vector_18+0x76>
 1d2:	18 f4       	brcc	.+6      	; 0x1da <__vector_18+0x62>
 1d4:	82 34       	cpi	r24, 0x42	; 66
 1d6:	81 f0       	breq	.+32     	; 0x1f8 <__vector_18+0x80>
 1d8:	4d c0       	rjmp	.+154    	; 0x274 <__vector_18+0xfc>
 1da:	82 35       	cpi	r24, 0x52	; 82
 1dc:	19 f0       	breq	.+6      	; 0x1e4 <__vector_18+0x6c>
 1de:	83 35       	cpi	r24, 0x53	; 83
 1e0:	81 f0       	breq	.+32     	; 0x202 <__vector_18+0x8a>
 1e2:	48 c0       	rjmp	.+144    	; 0x274 <__vector_18+0xfc>
			case 'R':
			ColorSeleccionado("Rojo");
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	0e 94 c6 01 	call	0x38c	; 0x38c <ColorSeleccionado>
			break;
 1ec:	43 c0       	rjmp	.+134    	; 0x274 <__vector_18+0xfc>
			case 'G':
			ColorSeleccionado("Verde");
 1ee:	85 e0       	ldi	r24, 0x05	; 5
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 c6 01 	call	0x38c	; 0x38c <ColorSeleccionado>
			break;
 1f6:	3e c0       	rjmp	.+124    	; 0x274 <__vector_18+0xfc>
			case 'B':
			ColorSeleccionado("Azul");
 1f8:	8b e0       	ldi	r24, 0x0B	; 11
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	0e 94 c6 01 	call	0x38c	; 0x38c <ColorSeleccionado>
			break;
 200:	39 c0       	rjmp	.+114    	; 0x274 <__vector_18+0xfc>
			case 'S':
			SistemaPausado();
 202:	0e 94 d5 01 	call	0x3aa	; 0x3aa <SistemaPausado>
			break;
 206:	36 c0       	rjmp	.+108    	; 0x274 <__vector_18+0xfc>
		}
	} else if (aux == 'r' || aux == 'g' || aux == 'b' || aux == 's'){
 208:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <aux>
 20c:	82 37       	cpi	r24, 0x72	; 114
 20e:	61 f0       	breq	.+24     	; 0x228 <__vector_18+0xb0>
 210:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <aux>
 214:	87 36       	cpi	r24, 0x67	; 103
 216:	41 f0       	breq	.+16     	; 0x228 <__vector_18+0xb0>
 218:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <aux>
 21c:	82 36       	cpi	r24, 0x62	; 98
 21e:	21 f0       	breq	.+8      	; 0x228 <__vector_18+0xb0>
 220:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <aux>
 224:	83 37       	cpi	r24, 0x73	; 115
 226:	21 f5       	brne	.+72     	; 0x270 <__vector_18+0xf8>
		col = aux - 32;
 228:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <aux>
 22c:	80 52       	subi	r24, 0x20	; 32
 22e:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <col>
		switch(aux){
 232:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <aux>
 236:	87 36       	cpi	r24, 0x67	; 103
 238:	71 f0       	breq	.+28     	; 0x256 <__vector_18+0xde>
 23a:	18 f4       	brcc	.+6      	; 0x242 <__vector_18+0xca>
 23c:	82 36       	cpi	r24, 0x62	; 98
 23e:	81 f0       	breq	.+32     	; 0x260 <__vector_18+0xe8>
 240:	19 c0       	rjmp	.+50     	; 0x274 <__vector_18+0xfc>
 242:	82 37       	cpi	r24, 0x72	; 114
 244:	19 f0       	breq	.+6      	; 0x24c <__vector_18+0xd4>
 246:	83 37       	cpi	r24, 0x73	; 115
 248:	81 f0       	breq	.+32     	; 0x26a <__vector_18+0xf2>
 24a:	14 c0       	rjmp	.+40     	; 0x274 <__vector_18+0xfc>
			case 'r':
			ColorSeleccionado("Rojo");
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	0e 94 c6 01 	call	0x38c	; 0x38c <ColorSeleccionado>
			break;
 254:	0f c0       	rjmp	.+30     	; 0x274 <__vector_18+0xfc>
			case 'g':
			ColorSeleccionado("Verde");
 256:	85 e0       	ldi	r24, 0x05	; 5
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	0e 94 c6 01 	call	0x38c	; 0x38c <ColorSeleccionado>
			break;
 25e:	0a c0       	rjmp	.+20     	; 0x274 <__vector_18+0xfc>
			case 'b':
			ColorSeleccionado("Azul");
 260:	8b e0       	ldi	r24, 0x0B	; 11
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	0e 94 c6 01 	call	0x38c	; 0x38c <ColorSeleccionado>
			break;
 268:	05 c0       	rjmp	.+10     	; 0x274 <__vector_18+0xfc>
			case 's':
			SistemaPausado();
 26a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <SistemaPausado>
			break;
 26e:	02 c0       	rjmp	.+4      	; 0x274 <__vector_18+0xfc>
		}
	} else {		//De ser el caracter vÃ¡lido, se notifica de ello y queda la selecciÃ³n en el estado previo
		CaracterInvalido();
 270:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <CaracterInvalido>
	}
}
 274:	ff 91       	pop	r31
 276:	ef 91       	pop	r30
 278:	bf 91       	pop	r27
 27a:	af 91       	pop	r26
 27c:	9f 91       	pop	r25
 27e:	8f 91       	pop	r24
 280:	7f 91       	pop	r23
 282:	6f 91       	pop	r22
 284:	5f 91       	pop	r21
 286:	4f 91       	pop	r20
 288:	3f 91       	pop	r19
 28a:	2f 91       	pop	r18
 28c:	0f 90       	pop	r0
 28e:	0f be       	out	0x3f, r0	; 63
 290:	0f 90       	pop	r0
 292:	1f 90       	pop	r1
 294:	18 95       	reti

00000296 <main>:

int main(void)
{
	ConfigurarTerminal8a1();
 296:	0e 94 b0 01 	call	0x360	; 0x360 <ConfigurarTerminal8a1>
	sei();
 29a:	78 94       	sei
	IniciarTerminal();
 29c:	0e 94 ba 01 	call	0x374	; 0x374 <IniciarTerminal>

	ConfigurarADC();
 2a0:	0e 94 53 00 	call	0xa6	; 0xa6 <ConfigurarADC>
	IniciarTimers();
 2a4:	0e 94 79 00 	call	0xf2	; 0xf2 <IniciarTimers>
	
    while (1){
		pos=ObtenerValor();
 2a8:	0e 94 69 00 	call	0xd2	; 0xd2 <ObtenerValor>
 2ac:	68 2f       	mov	r22, r24
		CambiarColor(col,pos);
 2ae:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <col>
 2b2:	0e 94 94 00 	call	0x128	; 0x128 <CambiarColor>
		UpdateRojo();
 2b6:	0e 94 aa 00 	call	0x154	; 0x154 <UpdateRojo>
 2ba:	f6 cf       	rjmp	.-20     	; 0x2a8 <main+0x12>

000002bc <SerialPort_Init>:

}

void SerialPort_TX_Interrupt_Disable(void)
{
	UCSR0B &=~(1<<UDRIE0);
 2bc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 2c0:	96 e0       	ldi	r25, 0x06	; 6
 2c2:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 2c6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 2ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 2ce:	08 95       	ret

000002d0 <SerialPort_TX_Enable>:
 2d0:	e1 ec       	ldi	r30, 0xC1	; 193
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	88 60       	ori	r24, 0x08	; 8
 2d8:	80 83       	st	Z, r24
 2da:	08 95       	ret

000002dc <SerialPort_RX_Enable>:


// Inicialización de Receptor

void SerialPort_RX_Enable(void){
	UCSR0B |= (1<<RXEN0);
 2dc:	e1 ec       	ldi	r30, 0xC1	; 193
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	80 81       	ld	r24, Z
 2e2:	80 61       	ori	r24, 0x10	; 16
 2e4:	80 83       	st	Z, r24
 2e6:	08 95       	ret

000002e8 <SerialPort_RX_Interrupt_Enable>:
}

void SerialPort_RX_Interrupt_Enable(void){
	UCSR0B |= (1<<RXCIE0);
 2e8:	e1 ec       	ldi	r30, 0xC1	; 193
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	80 68       	ori	r24, 0x80	; 128
 2f0:	80 83       	st	Z, r24
 2f2:	08 95       	ret

000002f4 <SerialPort_Wait_For_TX_Buffer_Free>:
// Transmisión

// Espera hasta que el buffer de TX este libre.
void SerialPort_Wait_For_TX_Buffer_Free(void){
	// Pooling - Bloqueante hasta que termine de transmitir.
	while(!(UCSR0A & (1<<UDRE0)));
 2f4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2f8:	85 ff       	sbrs	r24, 5
 2fa:	fc cf       	rjmp	.-8      	; 0x2f4 <SerialPort_Wait_For_TX_Buffer_Free>
}
 2fc:	08 95       	ret

000002fe <SerialPort_Send_Data>:

void SerialPort_Send_Data(char data){
	UDR0 = data;
 2fe:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 302:	08 95       	ret

00000304 <SerialPort_Send_String>:
}

void SerialPort_Send_String(char * msg){ //msg -> "Hola como andan hoy?" 20 ASCII+findecadena, tardo=20ms
 304:	ef 92       	push	r14
 306:	ff 92       	push	r15
 308:	0f 93       	push	r16
 30a:	1f 93       	push	r17
 30c:	cf 93       	push	r28
 30e:	7c 01       	movw	r14, r24
	uint8_t i = 0;
 310:	c0 e0       	ldi	r28, 0x00	; 0
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
 312:	07 c0       	rjmp	.+14     	; 0x322 <SerialPort_Send_String+0x1e>
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms 
 314:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <SerialPort_Wait_For_TX_Buffer_Free>
		SerialPort_Send_Data(msg[i]);
 318:	f8 01       	movw	r30, r16
 31a:	80 81       	ld	r24, Z
 31c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <SerialPort_Send_Data>
		i++;
 320:	cf 5f       	subi	r28, 0xFF	; 255
}

void SerialPort_Send_String(char * msg){ //msg -> "Hola como andan hoy?" 20 ASCII+findecadena, tardo=20ms
	uint8_t i = 0;
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
 322:	87 01       	movw	r16, r14
 324:	0c 0f       	add	r16, r28
 326:	11 1d       	adc	r17, r1
 328:	f8 01       	movw	r30, r16
 32a:	80 81       	ld	r24, Z
 32c:	81 11       	cpse	r24, r1
 32e:	f2 cf       	rjmp	.-28     	; 0x314 <SerialPort_Send_String+0x10>
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms 
		SerialPort_Send_Data(msg[i]);
		i++;
	}
}
 330:	cf 91       	pop	r28
 332:	1f 91       	pop	r17
 334:	0f 91       	pop	r16
 336:	ff 90       	pop	r15
 338:	ef 90       	pop	r14
 33a:	08 95       	ret

0000033c <MostrarMenu>:
/*Author: Ramiro Madera y Ulises Pereira*/

#include "terminal.h"

static void MostrarMenu(void){					//Muestra opciones de acción en la terminal
	SerialPort_Send_String("Seleccione 'R', 'r', 'G', 'g', 'B' o 'b' para modificar los colores del LED, y 'S' o 's' para dejar de modificar colores. \r\n");
 33c:	80 e1       	ldi	r24, 0x10	; 16
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	0e 94 82 01 	call	0x304	; 0x304 <SerialPort_Send_String>
	SerialPort_Wait_For_TX_Buffer_Free();
 344:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <SerialPort_Wait_For_TX_Buffer_Free>
 348:	08 95       	ret

0000034a <EscribirColor>:
}

static void EscribirColor(char * color){		//Escribe el color que se está modificando
	SerialPort_Send_String(color);
 34a:	0e 94 82 01 	call	0x304	; 0x304 <SerialPort_Send_String>
	SerialPort_Wait_For_TX_Buffer_Free();
 34e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <SerialPort_Wait_For_TX_Buffer_Free>
	SerialPort_Send_String(".\r\n");
 352:	8d e8       	ldi	r24, 0x8D	; 141
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	0e 94 82 01 	call	0x304	; 0x304 <SerialPort_Send_String>
	SerialPort_Wait_For_TX_Buffer_Free();
 35a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <SerialPort_Wait_For_TX_Buffer_Free>
 35e:	08 95       	ret

00000360 <ConfigurarTerminal8a1>:
}

void ConfigurarTerminal8a1(void){				//Configura la terminal para transmitir en formato 8N1
	SerialPort_Init(BR9600); 					// Inicializo formato 8N1 y BAUDRATE = 9600bps
 360:	87 e6       	ldi	r24, 0x67	; 103
 362:	0e 94 5e 01 	call	0x2bc	; 0x2bc <SerialPort_Init>
	SerialPort_TX_Enable();						// Activo el Transmisor del Puerto Serie (1<<TXEN0) en UCSR0B
 366:	0e 94 68 01 	call	0x2d0	; 0x2d0 <SerialPort_TX_Enable>
	SerialPort_RX_Enable();						// Activo el Receptor del Puerto Serie	(1<<RXEN0) en UCSR0B
 36a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable();
 36e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <SerialPort_RX_Interrupt_Enable>
 372:	08 95       	ret

00000374 <IniciarTerminal>:
}

void IniciarTerminal(void){						//Muestra Mnesaje de Bienvenida
	SerialPort_Send_String("Bienvenido al sistema. \r\n");
 374:	81 e9       	ldi	r24, 0x91	; 145
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	0e 94 82 01 	call	0x304	; 0x304 <SerialPort_Send_String>
	SerialPort_Wait_For_TX_Buffer_Free();
 37c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <SerialPort_Wait_For_TX_Buffer_Free>
	MostrarMenu();
 380:	0e 94 9e 01 	call	0x33c	; 0x33c <MostrarMenu>
 384:	08 95       	ret

00000386 <LeerCaracter>:
}

uint8_t LeerCaracter(void){
	uint8_t aux = UDR0; //la lectura del UDR borra flag RXC
 386:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	return aux;
}
 38a:	08 95       	ret

0000038c <ColorSeleccionado>:

void ColorSeleccionado(char * s){				//Muestra color seleccionado
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	ec 01       	movw	r28, r24
	SerialPort_Send_String("Estas modificando el color ");
 392:	8b ea       	ldi	r24, 0xAB	; 171
 394:	91 e0       	ldi	r25, 0x01	; 1
 396:	0e 94 82 01 	call	0x304	; 0x304 <SerialPort_Send_String>
	SerialPort_Wait_For_TX_Buffer_Free();
 39a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <SerialPort_Wait_For_TX_Buffer_Free>
	EscribirColor(s);
 39e:	ce 01       	movw	r24, r28
 3a0:	0e 94 a5 01 	call	0x34a	; 0x34a <EscribirColor>
}
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	08 95       	ret

000003aa <SistemaPausado>:

void SistemaPausado(void){						//Indica que la modificación está inactiva
	SerialPort_Send_String("Modificación desactivada. \r\n");
 3aa:	87 ec       	ldi	r24, 0xC7	; 199
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	0e 94 82 01 	call	0x304	; 0x304 <SerialPort_Send_String>
	SerialPort_Wait_For_TX_Buffer_Free();
 3b2:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <SerialPort_Wait_For_TX_Buffer_Free>
 3b6:	08 95       	ret

000003b8 <CaracterInvalido>:
}

void CaracterInvalido(void){					//Indica que el caracter ingresado no es válido
	SerialPort_Send_String("Caracter no valido. \r\n");
 3b8:	84 ee       	ldi	r24, 0xE4	; 228
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	0e 94 82 01 	call	0x304	; 0x304 <SerialPort_Send_String>
	SerialPort_Wait_For_TX_Buffer_Free();
 3c0:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <SerialPort_Wait_For_TX_Buffer_Free>
	MostrarMenu();
 3c4:	0e 94 9e 01 	call	0x33c	; 0x33c <MostrarMenu>
 3c8:	08 95       	ret

000003ca <_exit>:
 3ca:	f8 94       	cli

000003cc <__stop_program>:
 3cc:	ff cf       	rjmp	.-2      	; 0x3cc <__stop_program>
